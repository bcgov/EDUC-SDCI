---
apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: "${REPO_NAME}-template"
metadata:
  name: "${REPO_NAME}-backend-dc"
objects:
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: "${APP_NAME}-${BRANCH}"
      name: "${APP_NAME}-${BRANCH}"
    spec:
      replicas: ${{MIN_REPLICAS}}
      selector:
        matchLabels:
          app: "${APP_NAME}-${BRANCH}"
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
      template:
        metadata:
          annotations:
            openshift.io/generated-by: OpenShiftNewApp
          creationTimestamp:
          labels:
            app: "${APP_NAME}-${BRANCH}"
        spec:
          containers:
            - image: image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/${REPO_NAME}-backend:${TAG}
              imagePullPolicy: Always
              volumeMounts:
                - name: tls-certs
                  mountPath: "/etc/tls-certs"
                  readOnly: true
                - name: log-storage
                  mountPath: /logs
              livenessProbe:
                initialDelaySeconds: 20
                failureThreshold: 5
                httpGet:
                  path: "/api/health"
                  port: 8080
                  scheme: HTTP
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              name: "${APP_NAME}-backend-${BRANCH}"
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 443
                  protocol: TCP
              readinessProbe:
                initialDelaySeconds: 10
                failureThreshold: 5
                httpGet:
                  path: "/api/health"
                  port: 8080
                  scheme: HTTP
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              resources:
                requests:
                  cpu: "${MIN_CPU}"
                  memory: "${MIN_MEM}"
                limits:
                  cpu: "${MAX_CPU}"
                  memory: "${MAX_MEM}"
          volumes:
            - name: log-storage
              emptyDir: {}
            - name: tls-certs
              secret:
                secretName: sdci-backend-cert
            - name: flb-sc-config-volume
              configMap:
                name: "${APP_NAME}-backend-config-map"
      test: false
      triggers:
        - type: ConfigChange
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/serving-cert-secret-name: "sdci-backend-cert"
      labels:
        app: "${APP_NAME}-${BRANCH}"
      name: "${APP_NAME}-${BRANCH}"
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
        - name: 443-https
          port: 443
          protocol: TCP
          targetPort: 443
      selector:
        app: "${APP_NAME}-${BRANCH}"
  - apiVersion: v1
    kind: Route
    metadata:
      annotations:
        haproxy.router.openshift.io/timeout: 120s
        openshift.io/host.generated: "true"
      labels:
        app: "${APP_NAME}-${BRANCH}"
      name: "${APP_NAME}-backend-${BRANCH}"
    spec:
      host: "${HOST_ROUTE}"
      path: /api
      port:
        targetPort: 8080-tcp
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: "${APP_NAME}-backend-${BRANCH}"
        weight: 100
      wildcardPolicy: None
  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      name: "${APP_NAME}-backend-${BRANCH}-cpu-autoscaler"
    spec:
      scaleTargetRef:
        apiVersion: apps.openshift.io/v1
        kind: Deployment
        name: "${APP_NAME}-backend-${BRANCH}"
        subresource: scale
      minReplicas: ${{MIN_REPLICAS}}
      maxReplicas: ${{MAX_REPLICAS}}
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 90
  - apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: generate-csv-downloads
    spec:
      schedule: 1,2,3,4 2,14 * * *
      jobTemplate:
        spec:
          template:
            spec:
              containers:
                - name: api-request
                  image: alpine/curl
                  command:
                    - /bin/sh
                    - "-c"
                  args:
                    - >
                      curl -X GET
                      "https://${HOST_ROUTE}/api/v1/download/csv/school/all-contacts/ALL?filepath=allschoolcontacts"
                  resources: {}
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
                  imagePullPolicy: Always
              restartPolicy: OnFailure
              terminationGracePeriodSeconds: 30
              dnsPolicy: ClusterFirst
              securityContext: {}
              schedulerName: default-scheduler
  - apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: flush-file-cache
    spec:
      schedule: "50,51,52,53 1,13 * * *"
      jobTemplate:
        spec:
          template:
            spec:
              containers:
                - name: api-request
                  image: alpine/curl
                  command:
                    - /bin/sh
                    - "-c"
                  args:
                    - >
                      curl -X GET
                      "https://${HOST_ROUTE}/api/v1/download/flush-cache/a1e6f7b3c8d2e9a0b5d7c1e0f3c4b9a1"
                  resources: {}
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
                  imagePullPolicy: Always
              restartPolicy: OnFailure
              terminationGracePeriodSeconds: 30
              dnsPolicy: ClusterFirst
              securityContext: {}
              schedulerName: default-scheduler
  - apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: create-cache-schools
    spec:
      schedule: "55,56,57,58 1,13 * * *"
      jobTemplate:
        spec:
          template:
            spec:
              containers:
                - name: api-request
                  image: alpine/curl
                  command:
                    - /bin/sh
                    - "-c"
                  args:
                    - >
                      curl -X GET
                      "https://${HOST_ROUTE}/api/v1/institute/create-cache"
                  resources: {}
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
                  imagePullPolicy: Always
              restartPolicy: OnFailure
              terminationGracePeriodSeconds: 30
              dnsPolicy: ClusterFirst
              securityContext: {}
              schedulerName: default-scheduler
parameters:
  - name: REPO_NAME
    description: Application repository name
    required: true
  - name: BRANCH
    description: Job identifier (i.e. 'pr-5' OR 'master')
    required: true
  - name: NAMESPACE
    description: Target namespace reference (i.e. 'k8vopl-dev')
    required: true
  - name: APP_NAME
    description: Application name
    required: true
  - name: HOST_ROUTE
    description: The host the route will use to expose service outside cluster
    required: true
  - name: TAG
    description: The identifying tag for this specific deployment
    required: true
  - name: MIN_REPLICAS
    description: The minimum amount of replicas
    required: true
  - name: MAX_REPLICAS
    description: The maximum amount of replicas
    required: true
  - name: MIN_CPU
    description: The minimum amount of cpu
    required: true
  - name: MAX_CPU
    description: The maximum amount of cpu
    required: true
  - name: MIN_MEM
    description: The minimum amount of memory
    required: true
  - name: MAX_MEM
    description: The maximum amount of memory
    required: true
